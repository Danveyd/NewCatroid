import com.android.build.api.dsl.ManagedVirtualDevice

/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2023 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//373

buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'com.google.gms:google-services:4.4.2'
        //classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.2"
        //classpath "com.badlogicgames.jnigen:jnigen-gradle"
    }
}

// https://mvnrepository.com/artifact/com.badlogicgames.gdx/gdx-jnigen
//implementation 'com.badlogicgames.gdx:gdx-jnigen

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.23.0"
    id 'checkstyle'
//    id "com.badlogicgames.jnigen.jnigen-gradle"
    //id "com.badlogicgames.gdx.gdx-jnigen" version "2.5.2"
    //id "com.badlogicgames.jnigen.jnigen-gradle" version "2.0.0"
    //id 'com.google.gms.google-services'
}

//apply plugin: "com.badlogicgames.gdx.gdx-jnigen:2.5.2"

//apply plugin: 'java'

/*jnigen {

    // Задаём имя общей библиотеки
    sharedLibName = "example"

    // Включаем многопоточную компиляцию
    multiThreadedCompile = true

    // Общие флаги для всех BuildTarget
    all {
        cFlags += ["-fvisibility=hidden"]
        cppFlags += ["-std=c++11", "-fvisibility=hidden"]
        linkerFlags += ["-fvisibility=hidden"]
    }

    // Пример добавления платформы Windows 64
    addWindows(x64, x86) {
        // Дополнительные флаги компиляции
        cFlags += ["-fextraflag=fake"]
    }
}*/

/*jnigen {
    // Your shared library name
    sharedLibName = "example"
    //temporaryDir = "target"
    //libsDir = "libs"
    //jniDir = "jni"

    // Shared configuration for all BuildTargets. Executed first
    // See all BuildTarget options here: https://github.com/libgdx/gdx-jnigen/blob/master/gdx-jnigen/src/main/java/com/badlogic/gdx/jnigen/BuildTarget.java
    // Most paths are relative to the $jniDir directory
    // String options can be replaced by using `x = "value"` or appended to with `x += "extravalue"`
    // String[] options can be replaced by using `x = ["value"]` or appended to with `x += "extravalue"` or `x += ["extravalue", "extravalue2"]`
    all {
        // Add extra flags passed to the C compiler
        cFlags += " -fvisibility=hidden "
        // Add extra flags passed to the C++ compiler
        cppFlags += " -std=c++11 -fvisibility=hidden "
        // Add extra flags passed to the linker
        linkerFlags += " -fvisibility=hidden "
    }

    // Configure robovm.xml for IOS builds, most simple libraries will not need to do this
    robovm {
        // Use preexisting robovm.xml, cannot be combined with other options.
        //manualFile file("robovm.xml")

        // Add extra patterns to forceLinkClasses
        //forceLinkClasses "test", "test2"
        //forceLinkClasses "pattern3"
        // Add extra library "test.a" with variant "device"
        //extraLib "test.a", "device"
        //extraXCFramework "libs/test.xcframework"
    }

    // Add BuildTargets
    // All BuildTarget options can be further customized in an OS+Arch specific manner within a {} block

    // Add windows 32-bit BuildTarget and customize it
    add(Windows, x32) {
        //cFlags += " -fextraflag=fake "
        //compilerPrefix = "someprefix-";
        //cIncludes += "windowsspecificdir/*.c"
    }
    add(Windows, x64)
    add(Linux, x32)
    add(Linux, x64)
    add(Linux, x32, ARM)
    add(Linux, x64, ARM)
    add(MacOsX, x64)
    add(MacOsX, x64, ARM)
    add(Android) {
        // Add extra content to the generated Application.mk file
        //androidApplicationMk += "APP_STL := c++_static"
        // Specify which ABIs to build
        //androidABIs = ["armeabi", "armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
    }
    add(IOS) {
        // Define ios framework bundle identifier
        // xcframeworkBundleIdentifier = "com.badlogic.gdx.JniGen
        // Deinfe minimum supported iOS version
        // minIOSVersion = "11.0"
    }

    // Customize each BuildTarget that matches the condition
    each({ it.os != Android && !it.isARM }) {
        //cppFlags += " -march=nocona "
    }
    // Customize everything again, can be used for conditional changes
    each({ true }) {
        //if(!it.cppCompiler.contains("clang")) {
        //    it.cFlags += " -flto "
        //    it.cppFlags += " -flto "
        //    it.linkerFlags += " -flto "
        //}

        //if(it.cppCompiler.contains("clang"))
        //    it.linkerFlags += " -Wl,-dead_strip -Wl,-s "
        //else
        //    it.linkerFlags += " -Wl,--gc-sections "
    }
}*/

repositories {
    mavenLocal()
    google()
    mavenCentral()
    gradlePluginPortal()
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

ext {
    appId = 'org.catrobat.catroid'
    appName = '@string/app_name'
    manifestAppName = '@string/app_name'
    manifestAppIcon = '@mipmap/ic_launcher'

    projectVersion = "0.9"
    gdxVersion = "1.13.1"
    jni = ""
    box2d = "3.1.0-0"
    mockitoVersion = "3.12.4"
    espressoVersion = "3.1.0"
    playServicesVersion = '17.0.1'
    cameraXVersion = "1.0.0-beta07"
    room_version = "2.3.0"
    coroutines_version = "1.3.2"
    work_manager_version = '2.7.1'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'

apply from: 'gradle/code_quality_tasks.gradle'
apply from: 'gradle/release_crowdin_tasks.gradle'
apply from: 'gradle/release_fastlane_tasks.gradle'
apply from: 'gradle/standalone_apk_tasks.gradle'
apply from: 'gradle/setup_jacoco.gradle'
apply from: 'gradle/emulator.gradle'

if (rootProject.hasProperty('independent')) {
    println "Independent build"
    def today = new Date()
    appId += '.independent_' + today.format('YYYYMMdd_HHmm')
    appName = rootProject.property('independent') ?: 'Code ' + today.format('MMdd HH:mm')
    manifestAppName = appName
}

if (!rootProject.hasProperty("signingKeystore")) {
    ext.signingKeystore = "dummyKeystore"
}

ext.getProperty = { property, defaultValue ->
    rootProject.hasProperty(property) ? rootProject.property(property) : defaultValue
}

ext.useAndroidLocales = { ->
    rootProject.hasProperty('useAndroidLocales') ? 'true' : 'false'
}

ext.copyGoogleServicesFile = { flavorName, flavorId ->
    copy {
        from "google-services-template.json"
        rename { "google-services.json" }
        into "src/$flavorName"
        filter { line ->
            line.replaceAll('@appId@', flavorId)
        }
    }
}

def defaultVersionCode = 120
def defaultVersionName = "2.0.5"

android {
    compileSdk 33
    //buildToolsVersion = "33.0.2"

    namespace 'org.catrobat.catroid'

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }
    //20112009
    //2011

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 30
        applicationId appId
        testInstrumentationRunner 'org.catrobat.catroid.runner.UiTestApplicationRunner'
        versionCode defaultVersionCode
        versionName defaultVersionName
        println "VersionCode is $versionCode"
        println "VersionName is $versionName"
        manifestPlaceholders += [appName: manifestAppName,
                                 appIcon: manifestAppIcon,
                                 intentFilterScheme: "https",
                                 intentFilterHost: "share.catrob.at",
                                 intentFilterPathPattern: "/.*/project/.*"]

        buildConfigField "String", "GIT_COMMIT_INFO", "\"${getGitCommitInfo()}\""
        buildConfigField "String", "WEB_TEST_URL", "\"" + project.getProperties().get('webTestUrl') + "\""
        buildConfigField "boolean", "WEB_TEST_FLAG", (project.hasProperty('webTestUrl') ? 'true' :
                'false')

        buildConfigField "String", "PROJECT_NAME", "\"project\""
        buildConfigField "String", "START_PROJECT", "\"project\""

        buildConfigField "boolean", "USE_ANDROID_LOCALES_FOR_SCREENSHOTS", "false"

        buildConfigField "boolean", "FEATURE_LIST_AS_BASIC_DATATYPE", "false"

        buildConfigField "boolean", "FEATURE_1_APRIL", "true"
        buildConfigField "boolean", "FEATURE_AI_SENSORS_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
        buildConfigField "boolean", "FEATURE_ARDUINO_ENABLED", "false"
        buildConfigField "boolean", "FEATURE_CAST_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_EMBROIDERY_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_PLOT_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_NEURAL_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_INTERNET_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_LEGO_NXT_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_LEGO_EV3_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_PARROT_AR_DRONE_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_PARROT_JUMPING_SUMO_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_PHIRO_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_MERGE_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_NFC_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_POCKETMUSIC_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_RASPI_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_SCRATCH_CONVERTER_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_USER_REPORTERS_ENABLED", "false"
        buildConfigField "boolean", "FEATURE_MULTIPLAYER_VARIABLES_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_TESTBRICK_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_CATBLOCKS_ENABLED", "true"
        buildConfigField "boolean", "FEATURE_CATBLOCKS_DEBUGABLE", "false"
        buildConfigField "boolean", "FEATURE_AI_ASSIST_ENABLED", "true"
        resValue "string", "FEATURE_EMBROIDERY_PREFERENCES_ENABLED", "true"
        resValue "string", "FEATURE_PHIRO_PREFERENCES_ENABLED", "true"
        resValue "string", "FEATURE_MINDSTORMS_PREFERENCES_ENABLED", "true"
        resValue "string", "FEATURE_AI_PREFERENCES_ENABLED", "true"
        resValue "string", "SNACKBAR_HINTS_ENABLED", "false"
        resValue "string", "DEBUG_MODE", "false"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }


    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            jvmArgs '-Xmx2g'
        }
        animationsDisabled = true
    }

    sourceSets {
        androidTest {
            resources.srcDirs += ['src/androidTest/res', 'src/androidTest/assets']
        }
    }

    packagingOptions {
        jniLibs {
            excludes += ['lib/mips/*', 'lib/armeabi/*']
        }
        resources {
            excludes += ['LICENSE.txt', 'META-INF/LICENSE.md', 'META-INF/INDEX.LIST', 'lib/mips/*', 'lib/armeabi/*']
        }
    }


    signingConfigs {
        signedRelease {
            // credentials loaded in release_task.gradle
            storeFile file(project.getProperty("signingKeystore"))
            storePassword ""
            keyAlias ""
            keyPassword ""
        }

        debug {
            storeFile file("external/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    if (rootProject.hasProperty("signingKeystore") && rootProject.hasProperty("signingKeystorePassword") &&
            rootProject.hasProperty("signingKeyAlias") && rootProject.hasProperty("signingKeyPassword")) {
        android.signingConfigs.signedRelease {
            storePassword = rootProject.property("signingKeystorePassword")
            keyAlias = rootProject.property("signingKeyAlias")
            keyPassword = rootProject.property("signingKeyPassword")
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "USE_ANDROID_LOCALES_FOR_SCREENSHOTS", useAndroidLocales()
            resValue "string", "DEBUG_MODE", "true"
            buildConfigField "boolean", "FEATURE_CATBLOCKS_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CATBLOCKS_DEBUGABLE", "true"
            buildConfigField "boolean", "FEATURE_AI_ASSIST_ENABLED", "true"
            testCoverageEnabled = rootProject.hasProperty('enableCoverage')
            signingConfig signingConfigs.debug
        }

        release {
            buildConfigField "boolean", "FEATURE_MERGE_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_POCKETMUSIC_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_USER_REPORTERS_ENABLED", "false"
            resValue "string", "SNACKBAR_HINTS_ENABLED", "true"
            signingConfig signingConfigs.debug
        }

        signedRelease {
            initWith buildTypes.release
            signingConfig signingConfigs.signedRelease
        }
    }

    flavorDimensions = ["default"]
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    androidResources {
        noCompress 'lite'
    }
    lint {
        abortOnError false
        baseline file('config/lint-baseline.xml')
        htmlOutput file('build/reports/lint-report.html')
        htmlReport true
        ignore 'GradleDependency', 'OldTargetApi', 'ExtraTranslation', 'MissingTranslation', 'LintBaseline', 'ObsoleteLintCustomCheck'
        lintConfig file('config/lint.xml')
        textReport true
        xmlOutput file('build/reports/lint-report.xml')
        xmlReport true
    }


    productFlavors {
        catroid {
            isDefault.set(true)
        }
        createAtSchool {
            applicationIdSuffix '.createatschool'
        }
        embroideryDesigner {
            applicationIdSuffix '.embroiderydesigner'
            resValue "string", "FEATURE_EMBROIDERY_PREFERENCES_ENABLED", "true"
        }
        lunaAndCat {
            applicationIdSuffix '.lunaandcat'
        }
        phiro {
            applicationIdSuffix '.phiro'
            resValue "string", "FEATURE_PHIRO_PREFERENCES_ENABLED", "true"
            resValue "string", "FEATURE_AI_PREFERENCES_ENABLED", "true"
        }
        pocketCodeBeta {
            applicationIdSuffix '.test'
            manifestPlaceholders.appName = "Pocket Code BETA-" + defaultVersionCode
        }
        mindstorms {
            applicationIdSuffix '.mindstorms'
            resValue "string", "FEATURE_MINDSTORMS_PREFERENCES_ENABLED", "true"
            resValue "string", "FEATURE_AI_PREFERENCES_ENABLED", "true"
        }
        standalone {
            /*if (!project.hasProperty('packageName')) {
                applicationIdSuffix '.standalone'
            }
            versionCode 1
            versionName '1.0'

            buildConfigField "String", "START_PROJECT", "\"$projectId\""
            buildConfigField "String", "PROJECT_NAME", "\"$appName\""*/
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "true"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->

            if(variant.buildType.name == "signedRelease")
            {
                def flavorName
                switch(variant.flavorName)
                {
                    case "catroid":
                        flavorName = "pocketCode"
                        break
                    case "phiro":
                        flavorName = "phiroCode"
                        break
                    default:
                        flavorName = variant.flavorName
                }
                def buildType = variant.buildType.name
                outputFileName = "catroid-${flavorName}-${buildType}.apk"
            }
        }
    }
    productFlavors.all { flavor ->
        copyGoogleServicesFile(flavor.name, defaultConfig.applicationId + (flavor.applicationIdSuffix ?: ""))
    }
}

configurations {
    implementation.exclude group: 'xpp3' //compile problem with xstream
    //natives
}

dependencies {
    //implementation 'com.badlogicgames.gdx:gdx-jnigen:3.0.0'
    // https://mvnrepository.com/artifact/com.badlogicgames.gdx/gdx-jnigen
    //implementation "com.badlogicgames.gdx:gdx-jnigen:2.5.2"
    // https://mvnrepository.com/artifact/com.badlogicgames.gdx/gdx-jnigen-loader
   // implementation "com.badlogicgames.gdx:gdx-jnigen-loader:0.1-SNAPSHOT"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Paintroid local aar lib files
    if(rootProject.hasProperty('paintroidLocal')) {
        catroidImplementation "org.catrobat.paintroid:paintroid:-LOCAL"
        implementation "org.catrobat.paintroid:colorpicker:-LOCAL"
    } else {
        implementation fileTree(dir: 'src/main/libs', include: ['*.aar'])
    }
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation ('com.esotericsoftware:kryo:5.1.1')
    implementation 'id.zelory:compressor:2.1.1'
    implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:1.5.31"
    implementation "org.jetbrains.kotlin:kotlin-scripting-common:1.8.10"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'org.luaj:luaj-jse:3.0.1'
    //implementation "org.jetbrains.kotlin:kotlin-scripting-common:$kotlin_version"
    //implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlin_version"
    //implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.31" //was 1.7.0
    //implementation "org.jetbrains.kotlin:kotlin-scripting-jvm:1.7.0"
    implementation "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.5.31" //was 1.7.0
    implementation "org.jetbrains.kotlin:kotlin-script-util:1.5.31"
    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$work_manager_version"
    implementation "androidx.work:work-runtime:$work_manager_version"
    implementation "com.android.tools.build:apksig:7.0.0"
    //implementation "https://github.com/dvstLab/docker-builder/blob/c66a4711ca3acb38aab03c8636aaee04178afb04/zipsigner-4.0.jar"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    androidTestImplementation project(path: ':catroid')
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation('androidx.arch.core:core-testing:2.2.0') {
        exclude group: 'org.mockito', module: 'mockito-core'
    }

    // Support libraries
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.mediarouter:mediarouter:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'



    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    implementation ('com.opencsv:opencsv:5.0') {
        exclude group: 'org.apache.commons', module: 'commons-text'
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    // Dependency Injection
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-viewmodel:$koin_version"
    implementation "io.insert-koin:koin-androidx-fragment:$koin_version"
    implementation "io.insert-koin:koin-androidx-scope:$koin_version"

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // retrofit moshi converter
    implementation 'com.squareup.retrofit2:converter-moshi:2.7.1'
    // Glide (Images downloader)
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Room
    implementation("androidx.room:room-runtime:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    // Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")

    // Encrypted shared preferences
    implementation("androidx.security:security-crypto:1.0.0")

    //FireBase
    implementation platform('com.google.firebase:firebase-bom:33.7.0')
    implementation 'com.google.firebase:firebase-database-ktx' // Зависимость для работы с Realtime Database
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // CAST
    implementation "com.google.android.gms:play-services-cast:17.0.0"

    // Analytics
    implementation "com.google.android.gms:play-services-analytics:$playServicesVersion"

    implementation 'com.google.guava:guava:28.2-android'
    implementation 'com.google.code.gson:gson:2.8.7'

    implementation 'com.koushikdutta.async:androidasync:2.2.1'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'ar.com.hjg:pngj:2.1.0'

    implementation ('com.thoughtworks.xstream:xstream:1.4.11.1') {
        exclude group: 'xmlpull'
    }

    // Catblocks
    implementation "androidx.webkit:webkit:1.2.0"

    // Pocket Music
    implementation 'com.github.oliewa92:MidiDroid:v1.1'
    implementation 'com.github.billthefarmer:mididriver:v1.16'

    // CameraX
    implementation "androidx.camera:camera-camera2:$cameraXVersion"
    implementation "androidx.camera:camera-lifecycle:${cameraXVersion}"

    // ML Kit
    implementation 'com.google.android.gms:play-services-mlkit-face-detection:16.1.4'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:16.1.3'
    implementation 'com.google.mlkit:object-detection:16.2.7'
    implementation 'com.google.mlkit:language-id:16.1.1'
    implementation 'com.google.mlkit:pose-detection:17.0.0'

    // HUAWEI Mobile Services
    implementation 'com.huawei.hms:base:6.4.0.303'

    // Huawei ML Kit
    implementation 'com.huawei.hms:ml-computer-voice-asr-plugin:3.7.0.301'
    implementation 'com.huawei.hms:ml-computer-voice-asr:3.7.0.301'
    implementation 'com.huawei.hms:ml-computer-vision-face:3.7.0.301'
    implementation 'com.huawei.hms:ml-computer-voice-tts:3.7.0.303'
    implementation 'com.huawei.hms:ml-computer-vision-ocr:3.7.0.302'
    implementation 'com.huawei.hms:ml-computer-language-detection:3.7.0.301'
    implementation 'com.huawei.hms:ml-computer-vision-skeleton:3.7.0.301'

    // libGDX
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    //implementation "com.badlogicgames.gdx:gdx-box2d:$box2d"
    implementation "io.github.libgdx:gdx-box2d:$box2d" // $box2d = "3.1.0-0"
    //implementation "com.badlogicgames.gdx:gdx-jnigen-runtime:2.5.2"
    //implementation "com.badlogicgames.gdx:gdx-box2d:0.1-SNAPSHOT"
    /*natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"*/
    /*natives "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-x86"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-x86_64"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-arm64-v8a"*/

    /*implementation "com.badlogicgames.gdx:gdx-jnigen:$jni:natives-armeabi-v7a"
    implementation "com.badlogicgames.gdx:gdx-jnigen:$jni:natives-arm64-v8a"
    implementation "com.badlogicgames.gdx:gdx-jnigen:$jni:natives-x86"
    implementation "com.badlogicgames.gdx:gdx-jnigen:$jni:natives-x86_64"*/

    /*implementation "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-armeabi-v7a"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-arm64-v8a"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-x86"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$box2d:natives-x86_64"*/

    implementation "com.google.android.gms:play-services-auth:17.0.0"

    androidTestImplementation('tools.fastlane:screengrab:2.1.1') {
        // https://issuetracker.google.com/issues/123060356
        exclude group: 'com.android.support.test.uiautomator', module: 'uiautomator-v18'
    }
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    testImplementation 'org.powermock:powermock:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'

    testImplementation 'org.robolectric:robolectric:4.7.3'

    testImplementation 'org.reflections:reflections:0.9.11'
    testImplementation 'org.json:json:20190722'

    // Retrofit testing
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.14.9'

    // Koin for Unit tests
    androidTestImplementation "io.insert-koin:koin-test:$koin_version"

    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'

    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    // Room Test helpers
    testImplementation("androidx.room:room-testing:$room_version")
}

static def getGitCommitInfo() {
    def hash = 'git rev-parse --short HEAD'.execute().text.trim()
    def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

    return "branch $branch @$hash"
}

project.gradle.taskGraph.whenReady {
    connectedCatroidDebugAndroidTest.ignoreFailures = true
}

/*task copyAndroidNatives {
    doFirst {
        project.file("src/main/jniLibs/armeabi-v7a/").mkdirs()
        project.file("src/main/jniLibs/arm64-v8a/").mkdirs()
        project.file("src/main/jniLibs/x86_64/").mkdirs()
        project.file("src/main/jniLibs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/jniLibs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/jniLibs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}*/

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = "11"
  }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.huawei.agconnect'
